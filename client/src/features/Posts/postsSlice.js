import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit';
import { fetchPosts, createPost, updatePost } from './postAPI';


// Async Thunk functions
export const getPosts = createAsyncThunk('posts/FETCH_ALL', async () => {
  try {
    const { data } = await fetchPosts();
    return data
  } catch (error) {
    console.log(error.message);
  }
})

export const createPosts = createAsyncThunk('posts/CREATE', async (post) => {
  try {
    const response = await createPost(post)
    return response.data
  } catch (error) {
    console.log("this is an error:", error.message)
  }
})

export const updatePosts = createAsyncThunk('posts/UPDATE', async (post) => {
  try {
    const _id = post._id;
    delete post._id;
    const postBody = post;
    const { data } = await updatePost(_id, postBody);
    return data
  } catch (error) {
    console.log(error);
  }
})

// Initial state
const initialState = {
  entities: {},
  status: 'idle',
};


export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    UPDATE(state, action) {
      const post = action.payload
      const existingPost = state.posts.entities[post._id]
      if (existingPost) {
        existingPost = { ...post }
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPosts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getPosts.fulfilled, (state, action) => {
        state.status = 'idle';
        action.payload.forEach(post => {
          state.entities[post._id] = post
        })
      })
      .addCase(createPosts.fulfilled, (state, action) => {
        const post = action.payload
        state.entities[post._id] = post
      });
  },
});


export const { 
  UPDATE,
} = postsSlice.actions;

export default postsSlice.reducer;


const selectPostEntities = (state) => state.posts.entities;

export const selectPosts = createSelector(
  selectPostEntities,
  (entities) => Object.values(entities)
)

export const selectPostIds = createSelector(
  selectPosts,
  (posts) => posts.map((post) => post._id)
)

export const selectPostById = (state, postId) => {
  return selectPostEntities(state)[postId]
}